# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SLiTJq4YaafQSGyyy8JHob5WtfWIlWqp
"""

import tensorflow as tf
from tensorflow import keras
from keras import datasets,layers,models
import numpy as np
import matplotlib.pyplot as plt

(x_train,y_train),(x_test,y_test) = datasets.cifar10.load_data()

x_train.shape

x_test.shape

x_train[0]

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

y_train[:5]

y_train = y_train.reshape(-1)
y_train[:5]

classes[9]

plt.figure(figsize=(15,2))
plt.imshow(x_train[0])

def plot_sample(x,y,index):
  plt.figure(figsize = (15,2))
  plt.imshow(x[index])
  plt.xlabel(classes[y[index]])

plot_sample(x_train,y_train,0)

plot_sample(x_train,y_train,1)

x_train

x_train = x_train/255
x_test = x_test/255

ann = models.Sequential([
    layers.Flatten(input_shape=(32,32,3)),
    layers.Dense(3000,activation='relu'),
    layers.Dense(1000,activation='relu'),
    layers.Dense(10,activation='sigmoid')
])

ann.compile(
    optimizer='SGD',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

ann.fit(x_train,y_train,epochs=5)

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = ann.predict(x_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

"""Now let us build a convolutional neural network to train our images"""

cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

cnn.fit(x_train,y_train,epochs=1)

cnn.evaluate(x_test,y_test)

y_test[:5]

y_test = y_test.reshape(-1,)
plot_sample(x_test,y_test,1)

y_pred = cnn.predict(x_test)
y_pred[:5]

np.argmax(y_pred[0])

import numpy as np
y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

y_test[:5]

plot_sample(x_test,y_test,5)

classes[y_classes[5]]

print('Classification Report: \n',classification_report(y_test,y_classes))